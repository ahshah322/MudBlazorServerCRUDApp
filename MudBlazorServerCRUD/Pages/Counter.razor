@page "/counter"
@inject IStudentService StudentService
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
<br />
<br />
@* <MudSelect Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" T="Student" MultiSelection="false" SelectAll="true" SelectAllText="Select all felines" @bind-Value="value" @bind-SelectedValues="options" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="Felines" AdornmentIcon="@Icons.Material.Filled.Search">
        <ChildContent>
        @foreach (var student in StudentService.Students)
        {
            <MudSelectItem Value="student">
                <div >
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <div>@student.Name</div>
                    <div>@student.Email</div>
                    <div>@student.Marks</div>
                    <div>@student.DateOfBirth</div>
                    </MudStack>

                </div>
            </MudSelectItem>
        }
    </ChildContent>
</MudSelect> *@

<MudSelect @ref="_dropdownRef" Label="Select Item" @bind-Value="selectedItem" OnOpen="@OnSelectOpened" AnchorOrigin="Origin.BottomCenter">
    <ChildContent>
        @if (_openDropdown)
        {
            <MultiColumnDropdown />
        }
    </ChildContent>

</MudSelect>
@code {
    private Student value { get; set; }
    private IEnumerable<Student> options { get; set; } = new HashSet<Student>();
    private string selectedItem;
    private MudSelect<string> _dropdownRef;
    private int currentCount = 0;
    private IEnumerable<Student> employees = new List<Student>();
    private bool _openDropdown = false;

    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetStudents();
    }


    private void OnSelectOpened()
    {
        _openDropdown = true;
        // Logic to handle when the dropdown is opened
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} feline{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
