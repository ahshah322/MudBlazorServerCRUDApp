@inject IGenderService GenderService
@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@* <MudText Typo="Typo.h5">@btnText</MudText> *@

<MudDialog>
    <DialogContent>
        <MudForm Model="@_student" @ref="form">
            @* <MudGrid>
            <MudItem sm="6"> *@
            <MudTextField @bind-Value="_student.Name" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Name" Required="true" RequiredError="User name is required!" />
            <MudTextField @bind-Value="_student.Email" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid"} )" />
            <MudDatePicker Variant="Variant.Outlined" Label="Birth Date" Class="my-3" Editable="true" PickerVariant="PickerVariant.Inline"
                           @bind-Date="_student.DateOfBirth" Margin="Margin.Dense" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterCenter" />

            @* </MudItem>
            <MudItem sm="6"> *@
            <MudSelect Disabled="@_dropdownOpen" Margin="Margin.Dense" T="string" Style="z-index: 1;" Label="Select Student"
                       @bind-Value="_genderSelectedName" Clearable="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                       OnClose="CloseDropdown" OnClearButtonClick="OnMudSelectClearButtonClick" OnOpen="OpenDropdown" />

            <MudDataGrid @ref="_genderDataGrid" T="Gender" Elevation="10" FilterMode="DataGridFilterMode.ColumnFilterRow" Bordered="true"
                         RowClick="RowClick" Dense="true" QuickFilter="@_quickFilter" FilterCaseSensitivity="@_caseSensitivity"
                         StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                         MultiSelection="false" Class="@(_dropdownOpen ? "my-3" : "visually-hidden-focusable my-3")" Items="@GenderService.Genders" SortMode="SortMode.Multiple"
                         Filterable="true" Striped="false" EditMode="@_filterMode" Hover="true" EditTrigger="DataGridEditTrigger.Manual"
                         Style="z-index: 5;">
                <ToolBarContent>
                    @* <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => _genderDataGrid.SetEditingItemAsync(new Gender()))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">Add Student</MudButton> *@
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenNested" Size="Size.Small" Class="text-capitalize" StartIcon="@Icons.Material.Filled.Add">Add Gender</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search"
                                  Adornment="Adornment.End" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    @* <SelectColumn ShowInHeader="false" T="Student" /> *@
                    <PropertyColumn Property="x => x.Name" Filterable="true" />
                    <PropertyColumn Property="x => x.NameA" Filterable="true" />
                    <PropertyColumn Property="x => x.NameB" Filterable="true" />
                    <TemplateColumn CellClass="">
                        <CellTemplate>
                            <MudStack Row>
                                @* <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                                <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditGenderDataRow(context.Item))" />
                                <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteGenderDataRow(context.Item))" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <NoRecordsContent>
                    No Records added.
                </NoRecordsContent>
            </MudDataGrid>
            @*  </MudItem>
            </MudGrid> *@
        </MudForm>
        <MudDialog @bind-Visible="_nestedVisible">
            <DialogContent>
                <MudForm Model="@_gender" @ref="form">
                    <MudTextField @bind-Value="_gender.Name" Margin="Margin.Dense"
                                  Variant="Variant.Outlined" Label="Name" Required="true" RequiredError="Name is required!" />
                    <MudTextField @bind-Value="_gender.NameA" Margin="Margin.Dense"
                                  Variant="Variant.Outlined" Label="NameA" Required="true" RequiredError="NameA is required!" />
                    <MudTextField @bind-Value="_gender.NameB" Margin="Margin.Dense"
                                  Variant="Variant.Outlined" Label="NameB" Required="true" RequiredError="NameB is required!" />
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="CloseNested" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
                <MudButton OnClick="@(()=> SubmitGender())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelStudent" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
        <MudButton OnClick="@(()=> SubmitStudent())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
    </DialogActions>
</MudDialog>

 @code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private MudDataGrid<Gender> _genderDataGrid;
    private bool added = false;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.CaseInsensitive;
    DataGridEditMode _filterMode = DataGridEditMode.Form;
    private bool _dropdownOpen = false;
    private bool _nestedVisible;
    MudForm form;
    private Student _student = new Student() { Gender = new Gender() };
    private Gender _gender = new Gender();
    private string _searchString;
    private void CancelStudent() => MudDialog.Cancel();
    private int _genderSelectedId { get; set; }
    private string _genderSelectedName { get; set; }
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraSmall, BackdropClick = false, };

    protected override async Task OnInitializedAsync()
    {
        await LoadGenders();
    }
    private void OpenNested() => _nestedVisible = true;
    private void CloseNested() => _nestedVisible = false;

    async Task CreateNewGender()
    {
        //await DialogService.ShowAsync<AddOrEditGenderDialogForm>("", _maxWidth);
    }

    async Task DeleteGenderDataRow(Gender gender)
    {
        await GenderService.DeleteGender(gender.Id);
        Snackbar.Add("Gender deleted successfuly!", Severity.Success);
        await LoadGenders();
    }

    async Task EditGenderDataRow(Gender gender)
    {
        _gender = gender;
        OpenNested();
    }

    private async Task LoadGenders()
    {
        await GenderService.GetGenders();
        StateHasChanged();
    }

    // events
    void StartedEditingItem(Gender gender)
    {
        //_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(student)}");
    }

    void CanceledEditingItem(Gender gender)
    {
        CloseNested();
        //_events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(student)}");
    }

    async void CommittedItemChanges(Gender gender)
    {
        await GenderService.UpdateGender(gender);
        Snackbar.Add("Student updated successfuly!", Severity.Success);
    }

    private void RowClick(DataGridRowClickEventArgs<Gender> args)
    {
        _student.GenderId = args.Item.Id;
        _genderSelectedName = args.Item.Name;
        _dropdownOpen = false;
    }

    private void OpenDropdown()
    {
        _dropdownOpen = true;
    }

    private void CloseDropdown()
    {
        _dropdownOpen = false;
    }

    private void OnMudSelectClearButtonClick()
    {
        _dropdownOpen = true;
    }

    private async Task SubmitGender()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (_gender.Id == 0)
            {
                await GenderService.CreateGender(_gender);
                Snackbar.Add("Gender created successfuly!", Severity.Success);
                await LoadGenders();
            }
            else
            {
                await GenderService.UpdateGender(_gender);
                Snackbar.Add("Gender updated successfuly!", Severity.Success);
            }
            CloseNested();
        }
    }

    private async Task SubmitStudent()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await StudentService.CreateStudent(_student);
            NavigationManager.NavigateTo("/", true);
            Snackbar.Add("Student updated successfuly!", Severity.Success);
        }
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Gender, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NameA.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NameB.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };
}
