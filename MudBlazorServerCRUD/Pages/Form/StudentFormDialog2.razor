@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@* <MudText Typo="Typo.h5">@btnText</MudText> *@

<MudDialog>
    <DialogContent>
        <MudForm Model="@Student" @ref="form">
            <MudTextField @bind-Value="Student.Name" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Name" Required="true" RequiredError="User name is required!" />
            <MudTextField @bind-Value="Student.Email" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
            <MudDatePicker Variant="Variant.Outlined" Label="Birth Date" Class="my-3" Editable="true" PickerVariant="PickerVariant.Dialog"
                           @bind-Date="Student.DateOfBirth" Margin="Margin.Dense" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
        <MudButton OnClick="@(()=> Submit())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private MudDataGrid<Student> _studentDataGrid;
    private bool added = false;
    MudForm form;
    private Student Student = new Student();

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await StudentService.CreateStudent(Student);
            NavigationManager.NavigateTo("/", true);
            Snackbar.Add("Student updated successfuly!", Severity.Success);
        }
    }
}
