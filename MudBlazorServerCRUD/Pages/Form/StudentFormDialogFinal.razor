@inject IStudentService StudentService
@inject IGenderService GenderService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@* <MudText Typo="Typo.h5">@btnText</MudText> *@

<MudDialog >
    <DialogContent>
        <MudForm Model="@_student" @ref="form">
            <MudTextField @bind-Value="_student.Name" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Name" Required="true" RequiredError="User name is required!" />
            <MudTextField @bind-Value="_student.Email" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid"} )" />
            <MudDatePicker Variant="Variant.Outlined" Label="Birth Date" Class="my-3" Editable="true" PickerVariant="PickerVariant.Inline"
                           @bind-Date="_student.DateOfBirth" Margin="Margin.Dense" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterCenter" />
            <MudSelect Disabled="@_dropdownOpen" Margin="Margin.Dense" T="string" Style="z-index: 1;" Label="Select Student"
                       @bind-Value="_genderSelectedName" Clearable="true" Variant="Variant.Outlined"
                       OnClose="CloseDropdown" OnClearButtonClick="OnMudSelectClearButtonClick" OnOpen="OpenDropdown" />
            <MudPopover Open="@_dropdownOpen" OverflowBehavior="OverflowBehavior.FlipAlways" 
            TransformOrigin="Origin.TopLeft" AnchorOrigin="Origin.BottomLeft"
                          >
                 <MudDataGrid T="Gender" FilterMode="DataGridFilterMode.ColumnFilterRow" Bordered="true" Dense="true"
                              RowClick="RowClick" QuickFilter="@_quickFilter" FilterCaseSensitivity="@_caseSensitivity"
                              MultiSelection="false" Items="@GenderService.Genders" SortMode="SortMode.Multiple"
                              Filterable="true" Striped="false" Hover="true" EditTrigger="DataGridEditTrigger.Manual"
                              Hideable="false">
                     <ToolBarContent>
                         @* <MudButton Variant="Variant.Filled" Class="my-3 ml-auto" Color="Color.Success" OnClick="CreateNewStudent" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">Add Student</MudButton>
                        <MudSpacer />*@
                         <MudTextField @bind-Value="_searchString" Placeholder="Search" Variant="Variant.Outlined"
                         Adornment="Adornment.End" Immediate="true"
                                       AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                     </ToolBarContent>
                     <Columns>
                         @* <SelectColumn ShowInHeader="false" T="Student" /> *@
                         <PropertyColumn Property="x => x.Name" Filterable="true" />
                         <PropertyColumn Property="x => x.NameA" Filterable="true" />
                         <PropertyColumn Property="x => x.NameB" Filterable="true" />
                     </Columns>
                     <NoRecordsContent>
                         No Records added.
                     </NoRecordsContent>
                 </MudDataGrid>
             </MudPopover>
         </MudForm>
     </DialogContent>
     <DialogActions>
         <MudButton OnClick="Cancel" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
         <MudButton OnClick="@(()=> Submit())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
     </DialogActions>
 </MudDialog>

 @code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private MudDataGrid<Student> _studentDataGrid;
    private bool added = false;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.CaseInsensitive;

    private bool _dropdownOpen = false;
    MudForm form;
    private Student _student = new Student() { Gender = new Gender() };
    private Grade _newGrade = new Grade();
    private string _searchString;
    private void Cancel() => MudDialog.Cancel();
    private int _genderSelectedId { get; set; }
    private string _genderSelectedName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GenderService.GetGenders();
    }

    private async Task AddGrade()
    {
        //_student.Grades.Add(new Grade { Subject = _newGrade.Subject, Score = _newGrade.Score });
        _newGrade = new Grade();
    }

    private void RowClick(DataGridRowClickEventArgs<Gender> args)
    {
        _student.GenderId = args.Item.Id;
        _genderSelectedName = args.Item.Name;
        _dropdownOpen = false;
    }

    private void OpenDropdown()
    {
        _dropdownOpen = true;
    }

    private void CloseDropdown()
    {
        _dropdownOpen = false;
    }

    private void OnMudSelectClearButtonClick()
    {
        _dropdownOpen = true;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await StudentService.CreateStudent(_student);
            NavigationManager.NavigateTo("/", true);
            Snackbar.Add("Student updated successfuly!", Severity.Success);
        }
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Gender, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NameA.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NameB.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };
}
