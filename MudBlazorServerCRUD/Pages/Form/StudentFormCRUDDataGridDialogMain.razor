@inject IGenderService GenderService
@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@* <MudText Typo="Typo.h5">@btnText</MudText> *@

<MudDialog>
    <DialogContent>
        <MudForm Model="@_student" @ref="_studentForm">
            <MudTextField @bind-Value="_student.Name" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Name" Required="true" RequiredError="User name is required!" />
            <MudTextField @bind-Value="_student.Email" Margin="Margin.Dense"
                          Variant="Variant.Outlined" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid"} )" />
            <MudDatePicker Variant="Variant.Outlined" Label="Birth Date" Class="my-3" Editable="true" PickerVariant="PickerVariant.Inline"
                           @bind-Date="_student.DateOfBirth" Margin="Margin.Dense" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterCenter" />
            
            <MudDataGrid @ref="_gradesDataGrid" T="Grade" Elevation="5" FilterMode="DataGridFilterMode.ColumnFilterRow" Bordered="true"
                         RowClick="RowClick" Class="my-3" Dense="true" QuickFilter="@_quickFilter" FilterCaseSensitivity="@_caseSensitivity"
                         StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                         MultiSelection="false" Items="@_grades" SortMode="SortMode.Multiple"
                         Filterable="true" Striped="false" EditMode="@_filterMode" Hover="true" EditTrigger="DataGridEditTrigger.Manual"
                         Style="z-index: 5;">
                <ToolBarContent>
                    @* <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => _gradesDataGrid.SetEditingItemAsync(new Grade()))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">Add Grades</MudButton> *@
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenNested" Size="Size.Small" Class="text-capitalize" StartIcon="@Icons.Material.Filled.Add">Add Grade</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search"
                                  Adornment="Adornment.End" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    @* <SelectColumn ShowInHeader="false" T="Student" /> *@
                    <PropertyColumn Property="x => x.Subject" Filterable="true" />
                    <PropertyColumn Property="x => x.Score" Filterable="true" />
                    <TemplateColumn CellClass="">
                        <CellTemplate>
                            <MudStack Row>
                                @* <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                                <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditGenderDataRow(context.Item))" />
                                <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteGenderDataRow(context.Item))" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <NoRecordsContent>
                    No Records added.
                </NoRecordsContent>
            </MudDataGrid>
        </MudForm>
        <MudDialog @bind-Visible="_nestedVisible">
            <DialogContent>
                <MudForm Model="@_grade" @ref="_gradeFrom">
                    <MudTextField @bind-Value="_grade.Subject" Margin="Margin.Dense"
                                  Variant="Variant.Outlined" Label="Subject" Required="true" RequiredError="Subject is required!" />
                    <MudNumericField @bind-Value="_grade.Score" Margin="Margin.Dense"
                                     Variant="Variant.Outlined" Label="Score" Required="true" RequiredError="Score is required!" />
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="CloseNested" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
                <MudButton OnClick="@(()=> SubmitGrade())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelStudent" Variant="Variant.Filled" FullWidth="true">Cancel</MudButton>
        <MudButton OnClick="@(()=> SubmitStudent())" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Save</MudButton>
    </DialogActions>
</MudDialog>

 @code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private IEnumerable<Grade> _grades = new List<Grade>();
    private List<Grade> _gradesList = new();
    private MudDataGrid<Grade>? _gradesDataGrid;
    private Gender _gender = new Gender();
    private Grade _grade = new Grade();
    private Student _student = new Student() { Gender = new Gender() };
    MudForm _studentForm;
    MudForm _gradeFrom;
    private bool added = false;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.CaseInsensitive;
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraSmall, BackdropClick = false, };
    DataGridEditMode _filterMode = DataGridEditMode.Form;
    private bool _nestedVisible;
    private string _searchString;
    private void CancelStudent() => MudDialog.Cancel();
    private int _genderSelectedId { get; set; }
    private string _genderSelectedName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadGrades();
    }

    private void OpenNested() => _nestedVisible = true;
    private void CloseNested() => _nestedVisible = false;

    async Task CreateNewGender()
    {
        //await DialogService.ShowAsync<AddOrEditGenderDialogForm>("", _maxWidth);
    }

    async Task DeleteGenderDataRow(Grade grade)
    {
        _gradesList.Remove(grade);
    }

    async Task EditGenderDataRow(Grade grade)
    {
        OpenNested();
    }

    private async Task LoadGrades()
    {
        _grades = _gradesList.AsEnumerable();
        StateHasChanged();
    }

    // events
    void StartedEditingItem(Grade grade)
    {
        //_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(student)}");
    }

    void CanceledEditingItem(Grade grade)
    {
        CloseNested();
        //_events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(student)}");
    }

    async void CommittedItemChanges(Grade grade)
    {

        //await GenderService.UpdateGender(grade);
        // Snackbar.Add("Student updated successfuly!", Severity.Success);
    }

    private void RowClick(DataGridRowClickEventArgs<Grade> args)
    {
        // _student.GenderId = args.Item.Id;
        // _genderSelectedName = args.Item.Name;
    }

    private async Task SubmitGrade()
    {
        await _gradeFrom.Validate();

        if (_gradeFrom.IsValid)
        {
            if (_grade.GradeId == 0)
            {
                _gradesList.Add(_grade);
                Snackbar.Add("Grade created successfuly!", Severity.Success);
            }
            else
            {
                //_gradesList.Add(_grade);
                //await GenderService.UpdateGender(_gender);
                Snackbar.Add("Grade updated successfuly!", Severity.Success);
            }
            await LoadGrades();
            CloseNested();
        }
    }

    private async Task SubmitStudent()
    {
        await _studentForm.Validate();

        if (_studentForm.IsValid)
        {
            await StudentService.CreateStudent(_student);
            NavigationManager.NavigateTo("/", true);
            Snackbar.Add("Student updated successfuly!", Severity.Success);
        }
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Grade, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Subject.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Score}".Contains(_searchString))
            return true;

        return false;
    };
}
