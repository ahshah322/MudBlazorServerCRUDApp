@page "/"
@using System.Net.Http.Json
@using MudBlazorServerCRUD.Model
@using System.Collections.ObjectModel
@using System.ComponentModel.DataAnnotations

@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h6">Students</MudText>

<MudDataGrid @ref="_studentDataGrid" T="Student" FilterMode="DataGridFilterMode.ColumnFilterRow" Bordered="true"
             MultiSelection="false" Items="@FilteredStudents" SortMode="SortMode.Multiple"
             Filterable="true" FilterCaseSensitivity="@_caseSensitivity" QuickFilter="@_quickFilterStudent" Striped="true" EditTrigger="DataGridEditTrigger.Manual"
             Hideable="true" EditMode="@_filterMode" ReadOnly="@_readOnly">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Class="my-3 ml-auto" Color="Color.Success" OnClick="(() => AddStudentAsync(new Student()))" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">Add Student</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy">
            <FilterTemplate>
                <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                     <MudTextField Value="@_nameSearchFilter" T="string" Immediate="true" ValueChanged="@((x)=> OnNameValueChange(x))"></MudTextField>
                     <MudIconButton Icon="@(string.IsNullOrEmpty(_nameSearchFilter) ? Icons.Material.Filled.FilterAlt : Icons.Material.Filled.FilterAltOff)" Size="@Size.Small" />
                 </MudStack>
             </FilterTemplate>
         </PropertyColumn>
         <PropertyColumn Property="x => x.Email" Title="Email">
             <FilterTemplate>
                 <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                     <MudTextField Value="@_emailSearchFilter" T="string" Immediate="true" ValueChanged="@((x)=> OnEmailValueChange(x))"></MudTextField>
                     <MudIconButton Icon="@(string.IsNullOrEmpty(_emailSearchFilter) ? Icons.Material.Filled.FilterAlt : Icons.Material.Filled.FilterAltOff)" Size="@Size.Small" />
                 </MudStack>
             </FilterTemplate>
         </PropertyColumn>
        <PropertyColumn Property="x => x.GenderId" Title="Genders" />
        <PropertyColumn Property="x => x.Marks" Title="Marks">
             <FilterTemplate>
                 <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                     <MudNumericField Value="@_marksSearchFilter" T="int" Immediate="true" ValueChanged="@((x)=> OnMarksValueChange(x))"></MudNumericField>
                     <MudIconButton Icon="@(_marksSearchFilter > 0 ? Icons.Material.Filled.FilterAlt : Icons.Material.Filled.FilterAltOff)" Size="@Size.Small" />
                 </MudStack>
             </FilterTemplate>
         </PropertyColumn>
         <PropertyColumn Property="x => x.DateOfBirth" Title="Date Of Birth" CellClass="mt-3">
             <EditTemplate>
                 <MudDatePicker @bind-Date="context.Item.DateOfBirth" Class="mt-3" Margin="Margin.Dense" Variant="Variant.Outlined"
                                Editable="true"
                                DateFormat="dd/MM/yyyy" />
             </EditTemplate>
         </PropertyColumn>
         <TemplateColumn CellClass="">
             <CellTemplate>
                 <MudStack Row>
                    <MudIconButton Size="@Size.Small" Color="Color.Info" Icon="@Icons.Material.Outlined.Edit" OnClick="(() => EditStudentAsync(context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteStudentAsync(context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        No Records added.
    </NoRecordsContent>
    <PagerContent>
        <MudDataGridPager T="Student" />
    </PagerContent>
</MudDataGrid>

<style>
    .mud-popover.mud-popover-open {
        z-index: 1403 !important;
    }
</style>

@code {
    private MudDataGrid<Student>? _studentDataGrid;
    private Grade _grade = new Grade();
    private Student _student = new Student() { Gender = new Gender() };
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.CaseInsensitive;
    DataGridEditMode _filterMode = DataGridEditMode.Form;
    private readonly DialogOptions _studentDialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
    private string _searchString;
    private string _nameSearchFilter = string.Empty;
    private string _emailSearchFilter = string.Empty;
    private int _marksSearchFilter;
    private string _marksValue;
    private bool _sortNameByLength;
    private bool _readOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task AddStudentAsync(Student student)
    {
        var parameters = new DialogParameters<StudentDialog> { { x => x.Student, student } };

        var dialog = await DialogService.ShowAsync<StudentDialog>("Add Student", parameters, _studentDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadStudents();
        }
    }

    private async Task DeleteStudentAsync(Student student)
    {
        await StudentService.DeleteStudent(student.Id);
        Snackbar.Add("Student deleted successfuly!", Severity.Success);
        await LoadStudents();
    }

    private async Task EditStudentAsync(Student student)
    {
        var parameters = new DialogParameters<StudentDialog> { { x => x.Student, student } };

        var dialog = await DialogService.ShowAsync<StudentDialog>("Edit Student", parameters, _studentDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {

            await LoadStudents();
        }
    }

    // custom sort by name length
    private Func<Student, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<Student, bool> _quickFilterStudent => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.DateOfBirth}".Contains(_searchString))
            return true;

        return false;
    };

    // Filtered items after the custom row filter applied as input
    private IEnumerable<Student> FilteredStudents => StudentService.Students
        .Where(x => string.IsNullOrEmpty(_nameSearchFilter) || x.Name.Contains(_nameSearchFilter, StringComparison.OrdinalIgnoreCase))
        .Where(x => string.IsNullOrEmpty(_emailSearchFilter) || x.Email.Contains(_emailSearchFilter, StringComparison.OrdinalIgnoreCase))
        /* .Where(x => x.Marks == MarksFilter) */;

    private async Task LoadStudents()
    {
        await StudentService.GetStudents();
    }

    async void OnNameValueChange(string str)
    {
        _nameSearchFilter = str;
    }

    async void OnEmailValueChange(string str)
    {
        _emailSearchFilter = str;
    }

    async void OnMarksValueChange(int marks)
    {
        _marksSearchFilter = marks;
    }
}