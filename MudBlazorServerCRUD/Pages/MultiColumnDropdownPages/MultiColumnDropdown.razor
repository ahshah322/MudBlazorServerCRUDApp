@page "/multicolumndropdown"
@inject IStudentService StudentService


<MudText Typo="Typo.h4">Multi-Column Dropdown with Filtering</MudText>
<MudSelect Disabled="_dropdownOpen" T="string" Style="z-index: 1;" Label="Select Student" @bind-Value="SelectedStudent"
           Clearable="true" OnClose="CloseDropdown" OnOpen="OpenDropdown" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" />

<MudPopover Paper Open="@_dropdownOpen" DropShadow="false" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter" Style="width:80%">
     <MudDataGrid T="Student" FilterMode="DataGridFilterMode.ColumnFilterRow" Bordered="true"
                  RowClick="RowClick" QuickFilter="@_quickFilter"
                  MultiSelection="false" Items="@StudentService.Students" SortMode="SortMode.Multiple"
                  Filterable="true" Striped="false" Hover="true" EditTrigger="DataGridEditTrigger.Manual"
                  Hideable="false">
         <ToolBarContent>
             <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                           AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
         </ToolBarContent>
         <Columns>
             @* <SelectColumn ShowInHeader="false" T="Student" /> *@
             <PropertyColumn Property="x => x.Name" Filterable="true" />
             <PropertyColumn Property="x => x.Email" Title="Email" Filterable="true" />
             <PropertyColumn Property="x => x.Marks" Title="Marks" Filterable="true" />
             <PropertyColumn Property="x => x.DateOfBirth" Title="Date Of Birth" Filterable="true" />
         </Columns>
         <NoRecordsContent>
             No Records added.
         </NoRecordsContent>
     </MudDataGrid>
 </MudPopover>
@code {
    private string SelectedStudent { get; set; }
    private bool IsDropdownOpen { get; set; } = false;
    private string SelectedValue { get; set; }
    private string FilterText { get; set; }
    private bool _dropdownOpen = false;
    private string _searchString;
    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetStudents();
    }

    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }

    private void OpenDropdown()
    {
        _dropdownOpen = true;
    }

    private void CloseDropdown( )
    {
        _dropdownOpen = false;
    }
    

    private void RowClick(DataGridRowClickEventArgs<Student> args)
    {
        SelectedStudent = args.Item.Name;
        _dropdownOpen = false;
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Student, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Marks} {x.DateOfBirth}".Contains(_searchString))
            return true;

        return false;
    };
}
